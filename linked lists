https://leetcode.com/problems/odd-even-linked-list/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(!head)
            return NULL;
        ListNode* end=head;    
        ListNode* temp=head;
        int cnt=0;
        while(end->next){                     // this puts the node at the end of the lists
            end=end->next;
                cnt++;
            }
        cnt=cnt&1?(cnt/2)+1:(cnt/2);             //if we have odd number of nodes we have to cnt/2+1 times or else cnt/2 time
        while(cnt--)
        {
            end->next=temp->next;               //we have to skip the nodes if they are in odd position and connect the last node to the first even palce and swap it 
            temp->next=temp->next->next;
             end->next->next=NULL;
            temp=temp->next;
            end=end->next;
        }
        return head;
    }
};
//the time complexity is: O(n) n=number of nodes
